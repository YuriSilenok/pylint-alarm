const vscode = require("vscode");
const { exec } = require("child_process");

const HELLO = {
  E: "–•–ê-–•–ê!",
  C: "–õ—è –∫–∞–∫–æ–π!",
  W: "–ù–∏ —á—ë —Å–µ!",
  R: "–°—É–ø–µ—Ä –¥–∂—É–Ω!"
};

const TEXT = {
  E0001: "–ó–∞–±—ã–ª —Å–∏–Ω—Ç–∞–∫—Å–∏—Å python?",
  E0602: "–ó–∞–±—ã–ª –æ–±—ä—è–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥ –µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º?",
  C0114: "–ê –∫—Ç–æ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–æ–¥—É–ª—é?",
  C0115: "–ê –∫—Ç–æ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∫–ª–∞—Å—Å—É?",
  C0116: "–ê –∫—Ç–æ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –º–µ—Ç–æ–¥—É?",
  C0301: "–ê —á–µ–≥–æ —Å—Ç—Ä–æ–∫–∞ —Ç–∞–∫–∞—è –¥–ª–∏–Ω–Ω–∞—è?",
  C0303: "–ê –¥–ª—è –∫–æ–≥–æ —Ç—ã –ø–æ—Å—Ç–∞–≤–∏–ª –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏?",
  C0304: "–ê –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∫—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞?",
  C0305: "–ê –∫–æ–º—É —Ç—ã —Å—Ç–æ–ª—å–∫–æ —Å–¥–µ–ª–∞–ª –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞?",
  W0401: "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–≤–æ–∑–¥–æ—á–∫–æ–π –±—É–¥–µ—à—å –≤ —Å–≤–æ–∏—Ö –ü–≠–¢-–ø—Ä–æ–µ–∫—Ç–∞—Ö, –∞ —Ç—É—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–∏—à–∏",
  W0611: "–ù–∞–∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –≤—Å—è–∫–∏–π –º—É—Å–æ—Ä, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å? –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π —Ç–∞–∫ –≤ —Å–≤–æ–∏—Ö –ü–≠–¢-–ø—Ä–æ–µ–∫—Ç–∞—Ö",
  W0718: "–ö—Ç–æ —Ç—É—Ç –Ω–µ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è, –∫–∞–∫–æ–µ –∏–º–µ–Ω–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ–Ω –æ–∂–∏–¥–∞–µ—Ç?",
  W1309: "–ù—É –∏ –∑–∞—á–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –≤ –Ω–µ–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è?",
  R0912: "–°—É–¥—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤–µ—Ç–≤–ª–µ–Ω–∏–π, –ø–æ—Ä–∞ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö",
  R0914: "–°—É–¥—è –ø–æ –∫–æ–ª–∏—á–µ—Å–≤—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –ø–æ—Ä–∞ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö",
};

function activate(context) {
  const diagnosticCollection = vscode.languages.createDiagnosticCollection("pylint-buzzkill");
  context.subscriptions.push(diagnosticCollection);
  
  const poopDecorator = vscode.window.createTextEditorDecorationType({
    after: {
      contentText: 'üí©',
      margin: '0 0 0 10px'
    }
  });

  context.subscriptions.push(poopDecorator);
  
  const pythonPath = getPythonInterpreter();
  exec(`"${pythonPath}" -m pip install -U pylint`, (error, stdout, stderr) => {});


  vscode.workspace.onDidSaveTextDocument((document) => {
    if (document.languageId !== "python") return;

    if (!pythonPath) {
      vscode.window.showErrorMessage("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä—É Python.");
      return;
    }

    const filePath = document.fileName;
    
    
    
    const cmd = `"${pythonPath}" -m pylint "${filePath}" --max-line-length=80 --disable=E0401,C0325,R0903 --output-format=json`;
    // vscode.window.showInformationMessage(cmd);
    exec(cmd, (error, stdout, stderr) => {
      const diagnostics = [];
      const poopDecorations = [];

      if (!stdout || stdout.trim() === "") {
        const diagnostic = new vscode.Diagnostic(
          new vscode.Range(0, 0, 0, 1),
          "‚ùå Pylint –Ω–µ –≤–µ—Ä–Ω—É–ª JSON. –í–æ–∑–º–æ–∂–Ω–æ, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.",
          vscode.DiagnosticSeverity.Error
        );
        diagnostics.push(diagnostic);
        diagnosticCollection.set(document.uri, diagnostics);
        return;
      }

      let messages;
      try {
        messages = JSON.parse(stdout);
      } catch (parseError) {
        const diagnostic = new vscode.Diagnostic(
          new vscode.Range(0, 0, 0, 1),
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –æ—Ç pylint: ${parseError}`,
          vscode.DiagnosticSeverity.Error
        );
        diagnostics.push(diagnostic);
        diagnosticCollection.set(document.uri, diagnostics);
        return;
      }

      messages.forEach((msg) => {
        // vscode.window.showErrorMessage(`${msg}, ${msg.line}, ${msg.column}, ${msg.endLine}, ${msg.endColumn}`)
        let endColumn = msg.endColumn; 
        const messageId = msg["message-id"];
        if (messageId === 'C0301'){
          endColumn=79;
        }
        const range = new vscode.Range(
          (msg.line||1)-1, 
          (msg.column||1)-1,
          (msg.endLine||msg.line)-1,
          (endColumn||(msg.column+1))
        );

        const lineNum = (msg.line||1)-1;
        try {
          poopDecorations.push({
            range: new vscode.Range(
              lineNum, 
              document.lineAt(lineNum).text.length,
              lineNum,
              document.lineAt(lineNum).text.length
            )
          });
        } catch (e) {
        }
        
        const messageText = `${HELLO[messageId[0]]||":("} ${TEXT[messageId] || msg.message}`;
        const diagnostic = new vscode.Diagnostic(
          range,
          messageText,
          vscode.DiagnosticSeverity.Information
        );
        diagnostic.code = {
          value: messageId,
          target: vscode.Uri.parse(`https://pylint.pycqa.org/en/latest/technical_reference/features.html#${messageId}`)
        };
        diagnostic.source = "–î–£–®–ù–ò–õ–ê ";
        diagnostics.push(diagnostic);
      });

      diagnosticCollection.set(document.uri, diagnostics);

      const editor = vscode.window.activeTextEditor;
      if (editor && editor.document === document) {
        editor.setDecorations(poopDecorator, poopDecorations);
      }
    });
  });
}

function getPythonInterpreter() {
  const config = vscode.workspace.getConfiguration("python");
  const pythonPath =
    config.get("defaultInterpreterPath") || config.get("pythonPath");

  return pythonPath || "python"; // fallback –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–π Python
}

function deactivate() {}

module.exports = {
  activate,
  deactivate,
};